{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\michael khalaf\\\\OneDrive\\\\Desktop\\\\satellite image segmantation\\\\image_segmantation\\\\src\\\\componenets\\\\ImageDisplay.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ImageDisplay({\n  data\n}) {\n  _s();\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    if (canvasRef.current && data && data.prediction) {\n      const ctx = canvasRef.current.getContext('2d');\n      if (ctx) {\n        const predictionArray = data.prediction;\n        // Determine the dimensions of the data\n        const width = predictionArray[0].length;\n        const height = predictionArray.length;\n\n        // Set canvas dimensions\n        canvasRef.current.width = width;\n        canvasRef.current.height = height;\n\n        // Iterate through the data and set pixel values accordingly\n        for (let y = 0; y < height; y++) {\n          for (let x = 0; x < width; x++) {\n            const pixelData = predictionArray[y][x];\n            ctx.fillStyle = `rgb(${pixelData.join(',')})`;\n            ctx.fillRect(x, y, 1, 1);\n          }\n        }\n      }\n    }\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"m-0 p-0 col-12 rounded-4\",\n    style: {\n      width: '100%',\n      height: '100%',\n      zIndex: 2\n    },\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        width: '100%',\n        height: '100%',\n        zIndex: 2\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n}\n_s(ImageDisplay, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = ImageDisplay;\nexport default ImageDisplay;\nvar _c;\n$RefreshReg$(_c, \"ImageDisplay\");","map":{"version":3,"names":["React","useRef","useEffect","jsxDEV","_jsxDEV","ImageDisplay","data","_s","canvasRef","current","prediction","ctx","getContext","predictionArray","width","length","height","y","x","pixelData","fillStyle","join","fillRect","className","style","zIndex","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/michael khalaf/OneDrive/Desktop/satellite image segmantation/image_segmantation/src/componenets/ImageDisplay.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\r\n\r\nfunction ImageDisplay({ data }) {\r\n    const canvasRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        if (canvasRef.current && data && data.prediction) {\r\n            const ctx = canvasRef.current.getContext('2d');\r\n            if (ctx) {\r\n                const predictionArray = data.prediction;\r\n                // Determine the dimensions of the data\r\n                const width = predictionArray[0].length;\r\n                const height = predictionArray.length;\r\n\r\n                // Set canvas dimensions\r\n                canvasRef.current.width = width;\r\n                canvasRef.current.height = height;\r\n\r\n                // Iterate through the data and set pixel values accordingly\r\n                for (let y = 0; y < height; y++) {\r\n                    for (let x = 0; x < width; x++) {\r\n                        const pixelData = predictionArray[y][x];\r\n                        ctx.fillStyle = `rgb(${pixelData.join(',')})`;\r\n                        ctx.fillRect(x, y, 1, 1);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }, [data]);\r\n\r\n    return (\r\n        <div className='m-0 p-0 col-12 rounded-4' style={{ width: '100%', height: '100%', zIndex: 2 }}>\r\n            <canvas ref={canvasRef} style={{ width: '100%', height: '100%', zIndex: 2 }} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ImageDisplay;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,SAASC,YAAYA,CAAC;EAAEC;AAAK,CAAC,EAAE;EAAAC,EAAA;EAC5B,MAAMC,SAAS,GAAGP,MAAM,CAAC,IAAI,CAAC;EAE9BC,SAAS,CAAC,MAAM;IACZ,IAAIM,SAAS,CAACC,OAAO,IAAIH,IAAI,IAAIA,IAAI,CAACI,UAAU,EAAE;MAC9C,MAAMC,GAAG,GAAGH,SAAS,CAACC,OAAO,CAACG,UAAU,CAAC,IAAI,CAAC;MAC9C,IAAID,GAAG,EAAE;QACL,MAAME,eAAe,GAAGP,IAAI,CAACI,UAAU;QACvC;QACA,MAAMI,KAAK,GAAGD,eAAe,CAAC,CAAC,CAAC,CAACE,MAAM;QACvC,MAAMC,MAAM,GAAGH,eAAe,CAACE,MAAM;;QAErC;QACAP,SAAS,CAACC,OAAO,CAACK,KAAK,GAAGA,KAAK;QAC/BN,SAAS,CAACC,OAAO,CAACO,MAAM,GAAGA,MAAM;;QAEjC;QACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,MAAM,EAAEC,CAAC,EAAE,EAAE;UAC7B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,KAAK,EAAEI,CAAC,EAAE,EAAE;YAC5B,MAAMC,SAAS,GAAGN,eAAe,CAACI,CAAC,CAAC,CAACC,CAAC,CAAC;YACvCP,GAAG,CAACS,SAAS,GAAI,OAAMD,SAAS,CAACE,IAAI,CAAC,GAAG,CAAE,GAAE;YAC7CV,GAAG,CAACW,QAAQ,CAACJ,CAAC,EAAED,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;UAC5B;QACJ;MACJ;IACJ;EACJ,CAAC,EAAE,CAACX,IAAI,CAAC,CAAC;EAEV,oBACIF,OAAA;IAAKmB,SAAS,EAAC,0BAA0B;IAACC,KAAK,EAAE;MAAEV,KAAK,EAAE,MAAM;MAAEE,MAAM,EAAE,MAAM;MAAES,MAAM,EAAE;IAAE,CAAE;IAAAC,QAAA,eAC1FtB,OAAA;MAAQuB,GAAG,EAAEnB,SAAU;MAACgB,KAAK,EAAE;QAAEV,KAAK,EAAE,MAAM;QAAEE,MAAM,EAAE,MAAM;QAAES,MAAM,EAAE;MAAE;IAAE;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC9E,CAAC;AAEd;AAACxB,EAAA,CAjCQF,YAAY;AAAA2B,EAAA,GAAZ3B,YAAY;AAmCrB,eAAeA,YAAY;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}